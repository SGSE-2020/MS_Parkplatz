// source: parkplatz.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.parkplatz.AreaDetails', null, global);
goog.exportSymbol('proto.parkplatz.AreaRequest', null, global);
goog.exportSymbol('proto.parkplatz.ExpulsionRequest', null, global);
goog.exportSymbol('proto.parkplatz.ReservationDetails', null, global);
goog.exportSymbol('proto.parkplatz.ReservationRequest', null, global);
goog.exportSymbol('proto.parkplatz.TerminationRequest', null, global);
goog.exportSymbol('proto.parkplatz.UtilizationDetails', null, global);
goog.exportSymbol('proto.parkplatz.UtilizationRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parkplatz.ReservationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.parkplatz.ReservationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parkplatz.ReservationRequest.displayName = 'proto.parkplatz.ReservationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parkplatz.ReservationDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.parkplatz.ReservationDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parkplatz.ReservationDetails.displayName = 'proto.parkplatz.ReservationDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parkplatz.TerminationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.parkplatz.TerminationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parkplatz.TerminationRequest.displayName = 'proto.parkplatz.TerminationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parkplatz.AreaRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.parkplatz.AreaRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parkplatz.AreaRequest.displayName = 'proto.parkplatz.AreaRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parkplatz.AreaDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.parkplatz.AreaDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parkplatz.AreaDetails.displayName = 'proto.parkplatz.AreaDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parkplatz.ExpulsionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.parkplatz.ExpulsionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parkplatz.ExpulsionRequest.displayName = 'proto.parkplatz.ExpulsionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parkplatz.UtilizationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.parkplatz.UtilizationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parkplatz.UtilizationRequest.displayName = 'proto.parkplatz.UtilizationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.parkplatz.UtilizationDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.parkplatz.UtilizationDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.parkplatz.UtilizationDetails.displayName = 'proto.parkplatz.UtilizationDetails';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parkplatz.ReservationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.parkplatz.ReservationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parkplatz.ReservationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parkplatz.ReservationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    areaid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    startdatetime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    enddatetime: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parkplatz.ReservationRequest}
 */
proto.parkplatz.ReservationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parkplatz.ReservationRequest;
  return proto.parkplatz.ReservationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parkplatz.ReservationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parkplatz.ReservationRequest}
 */
proto.parkplatz.ReservationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAreaid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartdatetime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEnddatetime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parkplatz.ReservationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parkplatz.ReservationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parkplatz.ReservationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parkplatz.ReservationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAreaid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStartdatetime();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getEnddatetime();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string areaId = 1;
 * @return {string}
 */
proto.parkplatz.ReservationRequest.prototype.getAreaid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.parkplatz.ReservationRequest} returns this
 */
proto.parkplatz.ReservationRequest.prototype.setAreaid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string userId = 2;
 * @return {string}
 */
proto.parkplatz.ReservationRequest.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.parkplatz.ReservationRequest} returns this
 */
proto.parkplatz.ReservationRequest.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 startDateTime = 3;
 * @return {number}
 */
proto.parkplatz.ReservationRequest.prototype.getStartdatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.parkplatz.ReservationRequest} returns this
 */
proto.parkplatz.ReservationRequest.prototype.setStartdatetime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 endDateTime = 4;
 * @return {number}
 */
proto.parkplatz.ReservationRequest.prototype.getEnddatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.parkplatz.ReservationRequest} returns this
 */
proto.parkplatz.ReservationRequest.prototype.setEnddatetime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parkplatz.ReservationDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.parkplatz.ReservationDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parkplatz.ReservationDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parkplatz.ReservationDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    reservationid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parkplatz.ReservationDetails}
 */
proto.parkplatz.ReservationDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parkplatz.ReservationDetails;
  return proto.parkplatz.ReservationDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parkplatz.ReservationDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parkplatz.ReservationDetails}
 */
proto.parkplatz.ReservationDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReservationid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parkplatz.ReservationDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parkplatz.ReservationDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parkplatz.ReservationDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parkplatz.ReservationDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReservationid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string reservationId = 1;
 * @return {string}
 */
proto.parkplatz.ReservationDetails.prototype.getReservationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.parkplatz.ReservationDetails} returns this
 */
proto.parkplatz.ReservationDetails.prototype.setReservationid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string status = 2;
 * @return {string}
 */
proto.parkplatz.ReservationDetails.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.parkplatz.ReservationDetails} returns this
 */
proto.parkplatz.ReservationDetails.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parkplatz.TerminationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.parkplatz.TerminationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parkplatz.TerminationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parkplatz.TerminationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    reservationid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parkplatz.TerminationRequest}
 */
proto.parkplatz.TerminationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parkplatz.TerminationRequest;
  return proto.parkplatz.TerminationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parkplatz.TerminationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parkplatz.TerminationRequest}
 */
proto.parkplatz.TerminationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReservationid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parkplatz.TerminationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parkplatz.TerminationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parkplatz.TerminationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parkplatz.TerminationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReservationid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string reservationId = 1;
 * @return {string}
 */
proto.parkplatz.TerminationRequest.prototype.getReservationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.parkplatz.TerminationRequest} returns this
 */
proto.parkplatz.TerminationRequest.prototype.setReservationid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parkplatz.AreaRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.parkplatz.AreaRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parkplatz.AreaRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parkplatz.AreaRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    displayname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    areadetails: (f = msg.getAreadetails()) && proto.parkplatz.AreaDetails.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parkplatz.AreaRequest}
 */
proto.parkplatz.AreaRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parkplatz.AreaRequest;
  return proto.parkplatz.AreaRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parkplatz.AreaRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parkplatz.AreaRequest}
 */
proto.parkplatz.AreaRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayname(value);
      break;
    case 3:
      var value = new proto.parkplatz.AreaDetails;
      reader.readMessage(value,proto.parkplatz.AreaDetails.deserializeBinaryFromReader);
      msg.setAreadetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parkplatz.AreaRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parkplatz.AreaRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parkplatz.AreaRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parkplatz.AreaRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDisplayname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAreadetails();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.parkplatz.AreaDetails.serializeBinaryToWriter
    );
  }
};


/**
 * optional string displayName = 1;
 * @return {string}
 */
proto.parkplatz.AreaRequest.prototype.getDisplayname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.parkplatz.AreaRequest} returns this
 */
proto.parkplatz.AreaRequest.prototype.setDisplayname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional AreaDetails areaDetails = 3;
 * @return {?proto.parkplatz.AreaDetails}
 */
proto.parkplatz.AreaRequest.prototype.getAreadetails = function() {
  return /** @type{?proto.parkplatz.AreaDetails} */ (
    jspb.Message.getWrapperField(this, proto.parkplatz.AreaDetails, 3));
};


/**
 * @param {?proto.parkplatz.AreaDetails|undefined} value
 * @return {!proto.parkplatz.AreaRequest} returns this
*/
proto.parkplatz.AreaRequest.prototype.setAreadetails = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.parkplatz.AreaRequest} returns this
 */
proto.parkplatz.AreaRequest.prototype.clearAreadetails = function() {
  return this.setAreadetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.parkplatz.AreaRequest.prototype.hasAreadetails = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parkplatz.AreaDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.parkplatz.AreaDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parkplatz.AreaDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parkplatz.AreaDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    areaid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    totalspots: jspb.Message.getFieldWithDefault(msg, 2, 0),
    foodDrink: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    bar: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    fastFood: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    amenities: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    shopping: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    facilities: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    twoWheeler: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    hotel: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    grill: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    medicalAid: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    gas: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    charging: jspb.Message.getBooleanFieldWithDefault(msg, 14, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parkplatz.AreaDetails}
 */
proto.parkplatz.AreaDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parkplatz.AreaDetails;
  return proto.parkplatz.AreaDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parkplatz.AreaDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parkplatz.AreaDetails}
 */
proto.parkplatz.AreaDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAreaid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalspots(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFoodDrink(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBar(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFastFood(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAmenities(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShopping(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFacilities(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTwoWheeler(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHotel(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGrill(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMedicalAid(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGas(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCharging(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parkplatz.AreaDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parkplatz.AreaDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parkplatz.AreaDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parkplatz.AreaDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAreaid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTotalspots();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getFoodDrink();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getBar();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getFastFood();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getAmenities();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getShopping();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getFacilities();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getTwoWheeler();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getHotel();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getGrill();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getMedicalAid();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getGas();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getCharging();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
};


/**
 * optional string areaId = 1;
 * @return {string}
 */
proto.parkplatz.AreaDetails.prototype.getAreaid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.parkplatz.AreaDetails} returns this
 */
proto.parkplatz.AreaDetails.prototype.setAreaid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 totalSpots = 2;
 * @return {number}
 */
proto.parkplatz.AreaDetails.prototype.getTotalspots = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.parkplatz.AreaDetails} returns this
 */
proto.parkplatz.AreaDetails.prototype.setTotalspots = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool food_drink = 3;
 * @return {boolean}
 */
proto.parkplatz.AreaDetails.prototype.getFoodDrink = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.parkplatz.AreaDetails} returns this
 */
proto.parkplatz.AreaDetails.prototype.setFoodDrink = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool bar = 4;
 * @return {boolean}
 */
proto.parkplatz.AreaDetails.prototype.getBar = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.parkplatz.AreaDetails} returns this
 */
proto.parkplatz.AreaDetails.prototype.setBar = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool fast_food = 5;
 * @return {boolean}
 */
proto.parkplatz.AreaDetails.prototype.getFastFood = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.parkplatz.AreaDetails} returns this
 */
proto.parkplatz.AreaDetails.prototype.setFastFood = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool amenities = 6;
 * @return {boolean}
 */
proto.parkplatz.AreaDetails.prototype.getAmenities = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.parkplatz.AreaDetails} returns this
 */
proto.parkplatz.AreaDetails.prototype.setAmenities = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool shopping = 7;
 * @return {boolean}
 */
proto.parkplatz.AreaDetails.prototype.getShopping = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.parkplatz.AreaDetails} returns this
 */
proto.parkplatz.AreaDetails.prototype.setShopping = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool facilities = 8;
 * @return {boolean}
 */
proto.parkplatz.AreaDetails.prototype.getFacilities = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.parkplatz.AreaDetails} returns this
 */
proto.parkplatz.AreaDetails.prototype.setFacilities = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool two_wheeler = 9;
 * @return {boolean}
 */
proto.parkplatz.AreaDetails.prototype.getTwoWheeler = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.parkplatz.AreaDetails} returns this
 */
proto.parkplatz.AreaDetails.prototype.setTwoWheeler = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool hotel = 10;
 * @return {boolean}
 */
proto.parkplatz.AreaDetails.prototype.getHotel = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.parkplatz.AreaDetails} returns this
 */
proto.parkplatz.AreaDetails.prototype.setHotel = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool grill = 11;
 * @return {boolean}
 */
proto.parkplatz.AreaDetails.prototype.getGrill = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.parkplatz.AreaDetails} returns this
 */
proto.parkplatz.AreaDetails.prototype.setGrill = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional bool medical_aid = 12;
 * @return {boolean}
 */
proto.parkplatz.AreaDetails.prototype.getMedicalAid = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.parkplatz.AreaDetails} returns this
 */
proto.parkplatz.AreaDetails.prototype.setMedicalAid = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool gas = 13;
 * @return {boolean}
 */
proto.parkplatz.AreaDetails.prototype.getGas = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.parkplatz.AreaDetails} returns this
 */
proto.parkplatz.AreaDetails.prototype.setGas = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional bool charging = 14;
 * @return {boolean}
 */
proto.parkplatz.AreaDetails.prototype.getCharging = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.parkplatz.AreaDetails} returns this
 */
proto.parkplatz.AreaDetails.prototype.setCharging = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parkplatz.ExpulsionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.parkplatz.ExpulsionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parkplatz.ExpulsionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parkplatz.ExpulsionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    areaid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parkplatz.ExpulsionRequest}
 */
proto.parkplatz.ExpulsionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parkplatz.ExpulsionRequest;
  return proto.parkplatz.ExpulsionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parkplatz.ExpulsionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parkplatz.ExpulsionRequest}
 */
proto.parkplatz.ExpulsionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAreaid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parkplatz.ExpulsionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parkplatz.ExpulsionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parkplatz.ExpulsionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parkplatz.ExpulsionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAreaid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string areaId = 1;
 * @return {string}
 */
proto.parkplatz.ExpulsionRequest.prototype.getAreaid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.parkplatz.ExpulsionRequest} returns this
 */
proto.parkplatz.ExpulsionRequest.prototype.setAreaid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parkplatz.UtilizationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.parkplatz.UtilizationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parkplatz.UtilizationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parkplatz.UtilizationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    servicename: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parkplatz.UtilizationRequest}
 */
proto.parkplatz.UtilizationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parkplatz.UtilizationRequest;
  return proto.parkplatz.UtilizationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parkplatz.UtilizationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parkplatz.UtilizationRequest}
 */
proto.parkplatz.UtilizationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServicename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parkplatz.UtilizationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parkplatz.UtilizationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parkplatz.UtilizationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parkplatz.UtilizationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServicename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string serviceName = 1;
 * @return {string}
 */
proto.parkplatz.UtilizationRequest.prototype.getServicename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.parkplatz.UtilizationRequest} returns this
 */
proto.parkplatz.UtilizationRequest.prototype.setServicename = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.parkplatz.UtilizationDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.parkplatz.UtilizationDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.parkplatz.UtilizationDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parkplatz.UtilizationDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    displayname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    totalspots: jspb.Message.getFieldWithDefault(msg, 2, 0),
    utilizedspots: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.parkplatz.UtilizationDetails}
 */
proto.parkplatz.UtilizationDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.parkplatz.UtilizationDetails;
  return proto.parkplatz.UtilizationDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.parkplatz.UtilizationDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.parkplatz.UtilizationDetails}
 */
proto.parkplatz.UtilizationDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayname(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalspots(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUtilizedspots(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.parkplatz.UtilizationDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.parkplatz.UtilizationDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.parkplatz.UtilizationDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.parkplatz.UtilizationDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDisplayname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTotalspots();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getUtilizedspots();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string displayName = 1;
 * @return {string}
 */
proto.parkplatz.UtilizationDetails.prototype.getDisplayname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.parkplatz.UtilizationDetails} returns this
 */
proto.parkplatz.UtilizationDetails.prototype.setDisplayname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 totalSpots = 2;
 * @return {number}
 */
proto.parkplatz.UtilizationDetails.prototype.getTotalspots = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.parkplatz.UtilizationDetails} returns this
 */
proto.parkplatz.UtilizationDetails.prototype.setTotalspots = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 utilizedSpots = 3;
 * @return {number}
 */
proto.parkplatz.UtilizationDetails.prototype.getUtilizedspots = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.parkplatz.UtilizationDetails} returns this
 */
proto.parkplatz.UtilizationDetails.prototype.setUtilizedspots = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


goog.object.extend(exports, proto.parkplatz);
